{"ast":null,"code":"var _jsxFileName = \"/Users/mstars_lab2_07/Desktop/scoreboard/src/components/StopWatch.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StopWatch extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      isRunning: false,\n      time: 0\n    };\n\n    this.tick = () => {\n      console.log(\"tick\");\n\n      if (this.state.isRunning) {\n        this.setState({\n          time: this.state.time += 1\n        });\n      }\n    };\n\n    this.handleStopwatch = () => {\n      this.setState(prevState => ({\n        isRunning: !prevState.isRunning\n      }));\n      console.log(this.state.isRunning);\n    };\n  }\n\n  componentDidMount() {\n    this.intervalID = setInterval(() => this.tick, 100);\n  }\n\n  // startTimer =()=> {\n  //   if (this.stoptime == true) {\n  //         this.stoptime = false;\n  //         this.timerCycle();\n  //     }\n  // }\n  // stopTimer =()=> {\n  //   if (this.stoptime == false) {\n  //     this.stoptime = true;\n  //   }\n  // }\n  // timerCycle=()=> {\n  //     if (this.stoptime == false) {\n  //     this.sec = parseInt(this.sec);\n  //     this.min = parseInt(this.min);\n  //     this.hr = parseInt(this.hr);\n  //     this.sec = this.sec + 1;\n  //     if (this.sec == 60) {\n  //       this.min = this.min + 1;\n  //       this.sec = 0;\n  //     }\n  //     if (this.min == 60) {\n  //       this.hr = this.hr + 1;\n  //       this.min = 0;\n  //       this.sec = 0;\n  //     }\n  //     if (this.sec < 10 || this.sec == 0) {\n  //       this.sec = '0' + this.sec;\n  //     }\n  //     if (this.min < 10 || this.min == 0) {\n  //       this.min = '0' + this.min;\n  //     }\n  //     if (this.hr < 10 || this.hr == 0) {\n  //       this.hr = '0' + this.hr;\n  //     }\n  //     this.timer = this.hr + ':' + this.min + ':' + this.sec;\n  //     this.setTimeout(\"timerCycle()\", 1000);\n  //   }\n  // }\n  // resetTimer =()=> {\n  //     this.timer = '00:00:00';\n  // }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stopwatch\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Stopwatch\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"stopwatch-time\",\n        children: this.state.time\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"\",\n        onClick: this.handleStopwatch,\n        children: this.state.isRunning ? \"Stop\" : \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"\",\n        onClick: () => this.resetTimer(),\n        children: \"Reset timer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stopwatch\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default StopWatch;","map":{"version":3,"sources":["/Users/mstars_lab2_07/Desktop/scoreboard/src/components/StopWatch.js"],"names":["React","StopWatch","Component","state","isRunning","time","tick","console","log","setState","handleStopwatch","prevState","componentDidMount","intervalID","setInterval","render","resetTimer"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,SAAN,SAAwBD,KAAK,CAACE,SAA9B,CAAuC;AAAA;AAAA;AAAA,SACnCC,KADmC,GAC5B;AACHC,MAAAA,SAAS,EAAC,KADP;AAEHC,MAAAA,IAAI,EAAC;AAFF,KAD4B;;AAAA,SAUnCC,IAVmC,GAU5B,MAAI;AACPC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;;AACA,UAAG,KAAKL,KAAL,CAAWC,SAAd,EAAwB;AACpB,aAAKK,QAAL,CAAc;AACVJ,UAAAA,IAAI,EAAE,KAAKF,KAAL,CAAWE,IAAX,IAAkB;AADd,SAAd;AAGH;AACJ,KAjBkC;;AAAA,SAmBnCK,eAnBmC,GAmBlB,MAAI;AACjB,WAAKD,QAAL,CAAcE,SAAS,KAAG;AACtBP,QAAAA,SAAS,EAAE,CAACO,SAAS,CAACP;AADA,OAAH,CAAvB;AAGAG,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKL,KAAL,CAAWC,SAAvB;AACP,KAxBsC;AAAA;;AAMnCQ,EAAAA,iBAAiB,GAAE;AACf,SAAKC,UAAL,GAAkBC,WAAW,CAAC,MAAI,KAAKR,IAAV,EAAgB,GAAhB,CAA7B;AACH;;AAmBL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEAS,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAM,QAAA,SAAS,EAAC,gBAAhB;AAAA,kBAAkC,KAAKZ,KAAL,CAAWE;AAA7C;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAQ,QAAA,SAAS,EAAC,EAAlB;AAAqB,QAAA,OAAO,EAAE,KAAKK,eAAnC;AAAA,kBAAqD,KAAKP,KAAL,CAAWC,SAAX,GAAuB,MAAvB,GAAgC;AAArF;AAAA;AAAA;AAAA;AAAA,cAHJ,eAKI;AAAQ,QAAA,SAAS,EAAC,EAAlB;AAAqB,QAAA,OAAO,EAAE,MAAI,KAAKY,UAAL,EAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,eAMI;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAYH;;AA1FsC;;AA8FvC,eAAef,SAAf","sourcesContent":["import React from \"react\";\n\nclass StopWatch extends React.Component{\n    state ={\n        isRunning:false,\n        time:0\n    }\n\n    componentDidMount(){\n        this.intervalID = setInterval(()=>this.tick, 100)\n    }\n\n    tick = ()=>{\n        console.log(\"tick\")\n        if(this.state.isRunning){\n            this.setState({\n                time: this.state.time +=1\n            })\n        }\n    }\n\n    handleStopwatch =()=>{\n        this.setState(prevState=>({\n            isRunning: !prevState.isRunning\n        }))\n        console.log(this.state.isRunning);\n}\n\n\n// startTimer =()=> {\n//   if (this.stoptime == true) {\n//         this.stoptime = false;\n//         this.timerCycle();\n//     }\n// }\n// stopTimer =()=> {\n//   if (this.stoptime == false) {\n//     this.stoptime = true;\n//   }\n// }\n\n// timerCycle=()=> {\n//     if (this.stoptime == false) {\n//     this.sec = parseInt(this.sec);\n//     this.min = parseInt(this.min);\n//     this.hr = parseInt(this.hr);\n\n//     this.sec = this.sec + 1;\n\n//     if (this.sec == 60) {\n//       this.min = this.min + 1;\n//       this.sec = 0;\n//     }\n//     if (this.min == 60) {\n//       this.hr = this.hr + 1;\n//       this.min = 0;\n//       this.sec = 0;\n//     }\n\n//     if (this.sec < 10 || this.sec == 0) {\n//       this.sec = '0' + this.sec;\n//     }\n//     if (this.min < 10 || this.min == 0) {\n//       this.min = '0' + this.min;\n//     }\n//     if (this.hr < 10 || this.hr == 0) {\n//       this.hr = '0' + this.hr;\n//     }\n\n//     this.timer = this.hr + ':' + this.min + ':' + this.sec;\n\n//     this.setTimeout(\"timerCycle()\", 1000);\n//   }\n// }\n\n// resetTimer =()=> {\n//     this.timer = '00:00:00';\n// }\n\nrender (){\n    return (\n        <div className=\"stopwatch\">\n            <h2>Stopwatch</h2>\n            <span className=\"stopwatch-time\">{this.state.time}</span>\n            <button className=\"\" onClick={this.handleStopwatch}>{this.state.isRunning ? \"Stop\" : \"Start\"}</button>\n            {/* <button className=\"\" onClick={()=>this.stopTimer()}>Stop timer</button> */}\n            <button className=\"\" onClick={()=>this.resetTimer()}>Reset timer</button>\n            <div className=\"stopwatch\"></div>\n            {/* <Counter id={props.id} index={props.index} score={props.score} incrementScore={props.incrementScore} decrementScore={props.decrementScore}/> */}\n        </div>\n    )\n\n}\n    \n\n}\nexport default StopWatch"]},"metadata":{},"sourceType":"module"}