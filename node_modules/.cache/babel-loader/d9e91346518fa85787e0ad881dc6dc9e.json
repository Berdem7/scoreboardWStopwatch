{"ast":null,"code":"var _jsxFileName = \"/Users/mstars_lab2_07/Desktop/scoreboardWStopwatch/src/components/StopWatch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction StopWatch(props) {\n  _s();\n\n  const [isRunning, setIsRunning] = useState(false);\n  const [sec, setSec] = useState(0);\n  const [min, setMin] = useState(0);\n  const [hr, setHr] = useState(0); // state ={\n  //     isRunning:false,\n  //     sec:0,\n  //     min:0,\n  //     hr:0\n  // }\n  // useEffect(()=>{\n  //     intervalID()\n  // },\n  // [isRunning])\n\n  console.log(isRunning);\n  console.log(sec); // useEffect(()=>{\n  //    , [isRunning]\n  // )\n  // componentWillUnmount(){\n  //     clearInterval(this.intervalID)\n  // }\n\n  useEffect(() => {\n    if (isRunning) {\n      const intervalID = () => {\n        setInterval(() => tick(), 50);\n      };\n    }\n\n    return () => {\n      clearInterval(intervalID);\n    };\n  }, [isRunning]);\n\n  const tick = () => {\n    if (isRunning == true) {\n      console.log(\"itsrunning\");\n      setSec(sec => sec + 1);\n\n      if (sec == 60) {\n        setSec(sec => sec - 60);\n        setMin(min => min + 1);\n      }\n\n      if (min == 60) {\n        setMin(min => min - 60);\n        setHr(hr => hr + 1);\n      }\n    }\n  };\n\n  const fa = () => {\n    if (isRunning) {\n      // this.setState((prevState)=>({\n      //     sec:  prevState.sec += 1,\n      //     // }))\n      // })\n      // // console.log(Date.now())\n      // )\n      // setSec(sec+1)\n      setSec(sec + 1);\n      console.log(sec); //         if (sec == 100) {\n      //             setSec(sec-100)\n      //             setMin(min+1)\n      //             // this.setState((prevState)=>({\n      //             //     sec: prevState.sec - 100,\n      //             //     min: prevState.min += 1\n      //             // })\n      //             // )\n      //     //  this.state.min = prevState.min + 1;\n      //     //  this.state.sec = 0;\n      //  }\n      //     if (min == 60) {\n      //         // this.setState((prevState)=>({\n      //         //     min: prevState.min - 60,\n      //         //     hr: prevState.hr += 1\n      //         // }))\n      //         setMin(min-60)\n      //         setHr(hr+1)\n      //     }\n    }\n  };\n\n  const handleStopwatch = () => {\n    // console.log(Date.now())\n    // this.setState(prevState=>({\n    //     isRunning: !prevState.isRunning,\n    //     // sec:this.state.sec,\n    // }))\n    // console.log(this.state);\n    // if(isRunning){\n    //     intervalID();\n    // } else {\n    //     clearInterval(intervalID)\n    // }\n    setIsRunning(isRunning => !isRunning); // if(isRunning){\n    //     intervalID()\n    // }\n  };\n\n  const resetTimer = () => {\n    setHr(0);\n    setMin(0);\n    setSec(0);\n    setIsRunning(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stopwatch\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Stopwatch\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"stopwatch-time\",\n      children: [hr < 10 ? \"0\" + hr : hr, \" m :\", min < 10 ? \"0\" + min : min, \" s :\", sec < 10 ? \"0\" + sec : sec, \" ms\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"\",\n      onClick: handleStopwatch,\n      children: isRunning ? \"Stop\" : \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"\",\n      onClick: resetTimer,\n      children: \"Reset timer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stopwatch\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n}\n\n_s(StopWatch, \"Leu9lffgIutS5I556Q+Nte61IRs=\");\n\n_c = StopWatch;\nexport default StopWatch;\n\nvar _c;\n\n$RefreshReg$(_c, \"StopWatch\");","map":{"version":3,"sources":["/Users/mstars_lab2_07/Desktop/scoreboardWStopwatch/src/components/StopWatch.js"],"names":["React","useEffect","useState","StopWatch","props","isRunning","setIsRunning","sec","setSec","min","setMin","hr","setHr","console","log","intervalID","setInterval","tick","clearInterval","fa","handleStopwatch","resetTimer"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nfunction StopWatch (props){\n    const [isRunning, setIsRunning] = useState(false);\n    const [sec, setSec] = useState(0);\n    const [min, setMin] = useState(0);\n    const [hr, setHr] = useState(0);\n\n    // state ={\n    //     isRunning:false,\n    //     sec:0,\n    //     min:0,\n    //     hr:0\n    // }\n    \n        \n        // useEffect(()=>{\n        //     intervalID()\n        // },\n        // [isRunning])\n    \n        console.log(isRunning);\n        console.log(sec);\n\n        // useEffect(()=>{\n        //    , [isRunning]\n\n        // )\n        \n            \n    \n\n    // componentWillUnmount(){\n    //     clearInterval(this.intervalID)\n    // }\n\n    useEffect(()=>{\n        if(isRunning){\n            const intervalID = ()=>{\n                setInterval(()=> tick(), 50)}}\n        return ()=>{\n\n            clearInterval(intervalID)\n        }\n\n        }\n    \n        ,[isRunning]\n    )\n    \n        const tick = () => {\n            if(isRunning==true){\n                console.log(\"itsrunning\")\n                setSec(sec=>sec+1)\n                if(sec==60){\n                    setSec(sec=>sec-60)\n                    setMin(min=>min+1)\n                }\n                if(min==60){\n                    setMin(min=>min-60)\n                    setHr(hr=>hr+1)\n                }\n            }\n        }\n    const fa = ()=>{\n        \n        if(isRunning){\n            // this.setState((prevState)=>({\n            //     sec:  prevState.sec += 1,\n                \n            //     // }))\n                \n            // })\n            \n            // // console.log(Date.now())\n            // )\n            // setSec(sec+1)\n            setSec(sec+1)\n            console.log(sec)\n    //         if (sec == 100) {\n    //             setSec(sec-100)\n    //             setMin(min+1)\n    //             // this.setState((prevState)=>({\n    //             //     sec: prevState.sec - 100,\n    //             //     min: prevState.min += 1\n    //             // })\n    //             // )\n    //     //  this.state.min = prevState.min + 1;\n    //     //  this.state.sec = 0;\n    //  }\n    //     if (min == 60) {\n    //         // this.setState((prevState)=>({\n    //         //     min: prevState.min - 60,\n    //         //     hr: prevState.hr += 1\n    //         // }))\n    //         setMin(min-60)\n    //         setHr(hr+1)\n    //     }\n        }\n        }\n\n const   handleStopwatch =()=>{\n        // console.log(Date.now())\n        // this.setState(prevState=>({\n        //     isRunning: !prevState.isRunning,\n        //     // sec:this.state.sec,\n            \n        // }))\n        // console.log(this.state);\n        // if(isRunning){\n        //     intervalID();\n        // } else {\n        //     clearInterval(intervalID)\n        // }\n        setIsRunning(isRunning=>!isRunning)\n        // if(isRunning){\n\n        //     intervalID()\n        // }\n\n}\n\n\nconst resetTimer =()=> {\n    setHr(0)\n    setMin(0)\n    setSec(0)\n    setIsRunning(false)\n}\n\n    return (\n        <div className=\"stopwatch\">\n            <h2>Stopwatch</h2>\n            <span className=\"stopwatch-time\">{hr <10 ? \"0\"+hr :hr} m :{min <10 ? \"0\"+min :min} s :{sec <10 ? \"0\"+sec :sec} ms</span>\n            <button className=\"\" onClick={handleStopwatch}>{isRunning ? \"Stop\" : \"Start\"}</button>\n            {/* <button className=\"\" onClick={()=>this.stopTimer()}>Stop timer</button> */}\n            <button className=\"\" onClick={resetTimer}>Reset timer</button>\n            <div className=\"stopwatch\"></div>\n            {/* <Counter id={props.id} index={props.index} score={props.score} incrementScore={props.incrementScore} decrementScore={props.decrementScore}/> */}\n        </div>\n    )\n\n}\n    \n\nexport default StopWatch"]},"metadata":{},"sourceType":"module"}