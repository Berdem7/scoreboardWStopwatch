{"ast":null,"code":"var _jsxFileName = \"/Users/mstars_lab2_07/Desktop/scoreboard/src/components/StopWatch.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StopWatch extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      isRunning: false,\n      sec: 0,\n      min: 0,\n      hr: 0\n    };\n\n    this.tick = () => {\n      if (this.state.isRunning) {\n        this.setState({\n          sec: this.state.sec += 1\n        });\n\n        if (this.state.sec == 60) {\n          this.state.min = prevState.min + 1;\n          this.state.sec = 0;\n        }\n\n        if (this.state.min == 60) {\n          this.state.hr = prevState.hr + 1;\n          this.state.min = 0;\n          this.state.sec = 0;\n        }\n\n        if (this.state.sec < 10 || this.state.sec == 0) {\n          this.state.sec = '0' + this.state.sec;\n        }\n\n        if (this.state.min < 10 || this.state.min == 0) {\n          this.state.min = '0' + this.state.min;\n        }\n\n        if (this.state.hr < 10 || this.state.hr == 0) {\n          this.state.hr = '0' + this.state.hr;\n        } // }))\n\n      } // console.log(Date.now())\n\n    };\n\n    this.handleStopwatch = () => {\n      this.setState(prevState => ({\n        isRunning: !prevState.isRunning\n      }));\n      console.log(this.state.isRunning);\n    };\n\n    this.resetTimer = () => {\n      this.setState({\n        time: 0\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.intervalID = setInterval(() => this.tick(), 100);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stopwatch\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Stopwatch\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"stopwatch-time\",\n        children: [this.state.hr, \":\", this.state.min, \":\", this.state.sec]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"\",\n        onClick: this.handleStopwatch,\n        children: this.state.isRunning ? \"Stop\" : \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"\",\n        onClick: this.resetTimer,\n        children: \"Reset timer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stopwatch\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default StopWatch;","map":{"version":3,"sources":["/Users/mstars_lab2_07/Desktop/scoreboard/src/components/StopWatch.js"],"names":["React","StopWatch","Component","state","isRunning","sec","min","hr","tick","setState","prevState","handleStopwatch","console","log","resetTimer","time","componentDidMount","intervalID","setInterval","componentWillUnmount","clearInterval","render"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nclass StopWatch extends React.Component{\n    state ={\n        isRunning:false,\n        sec:0,\n        min:0,\n        hr:0\n    }\n\n    componentDidMount(){\n        this.intervalID = setInterval(()=>this.tick(), 100)\n    }\n\n    componentWillUnmount(){\n        clearInterval(this.intervalID)\n    }\n\n    tick = ()=>{\n        if(this.state.isRunning){\n            this.setState({\n                sec : (this.state.sec += 1),})\n\n                    if (this.state.sec == 60) {\n                 this.state.min = prevState.min + 1;\n                 this.state.sec = 0;\n             }\n                if (this.state.min == 60) {\n                this.state.hr = prevState.hr + 1;\n                this.state.min = 0;\n                this.state.sec = 0;\n                }\n\n                if (this.state.sec < 10 || this.state.sec == 0) {\n                this.state.sec = '0' + this.state.sec;\n                }\n                if (this.state.min < 10 || this.state.min == 0) {\n                this.state.min = '0' + this.state.min}\n                if (this.state.hr < 10 || this.state.hr == 0) {\n                this.state.hr = '0' + this.state.hr;\n                }\n            // }))\n        }\n        // console.log(Date.now())\n            }\n\n    handleStopwatch =()=>{\n        this.setState(prevState=>({\n            isRunning: !prevState.isRunning\n        }))\n        console.log(this.state.isRunning);\n}\n\n\n// startTimer =()=> {\n//   if (this.stoptime == true) {\n//         this.stoptime = false;\n//         this.timerCycle();\n//     }\n// }\n// stopTimer =()=> {\n//   if (this.stoptime == false) {\n//     this.stoptime = true;\n//   }\n// }\n\n// timerCycle=()=> {\n//     if (this.stoptime == false) {\n//     this.sec = parseInt(this.sec);\n//     this.min = parseInt(this.min);\n//     this.hr = parseInt(this.hr);\n\n//     this.sec = this.sec + 1;\n\n//     if (this.sec == 60) {\n//       this.min = this.min + 1;\n//       this.sec = 0;\n//     }\n//     if (this.min == 60) {\n//       this.hr = this.hr + 1;\n//       this.min = 0;\n//       this.sec = 0;\n//     }\n\n//     if (this.sec < 10 || this.sec == 0) {\n//       this.sec = '0' + this.sec;\n//     }\n//     if (this.min < 10 || this.min == 0) {\n//       this.min = '0' + this.min;\n//     }\n//     if (this.hr < 10 || this.hr == 0) {\n//       this.hr = '0' + this.hr;\n//     }\n\n//     this.timer = this.hr + ':' + this.min + ':' + this.sec;\n\n//     this.setTimeout(\"timerCycle()\", 1000);\n//   }\n// }\n\nresetTimer =()=> {\n    this.setState({\n        time:0\n    })\n}\n\nrender (){\n    return (\n        <div className=\"stopwatch\">\n            <h2>Stopwatch</h2>\n            <span className=\"stopwatch-time\">{this.state.hr}:{this.state.min}:{this.state.sec}</span>\n            <button className=\"\" onClick={this.handleStopwatch}>{this.state.isRunning ? \"Stop\" : \"Start\"}</button>\n            {/* <button className=\"\" onClick={()=>this.stopTimer()}>Stop timer</button> */}\n            <button className=\"\" onClick={this.resetTimer}>Reset timer</button>\n            <div className=\"stopwatch\"></div>\n            {/* <Counter id={props.id} index={props.index} score={props.score} incrementScore={props.incrementScore} decrementScore={props.decrementScore}/> */}\n        </div>\n    )\n\n}\n    \n\n}\nexport default StopWatch"]},"metadata":{},"sourceType":"module"}